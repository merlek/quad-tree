!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("quad-tree",[],t):"object"==typeof exports?exports["quad-tree"]=t():e["quad-tree"]=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),u=n(2),c=function(){function e(e){var t=e.center,n=e.width,r=e.height;this.points=[],this.children=[],this.bound=new u.Rect(t,n,r)}return e.prototype.insert=function(t){return!!this.bound.contains(t)&&(this.points.length<e.capacity?(this.points.push(t),!0):(this.divided||this.subdivide(),this.children.reduce((function(e,n){return e||n.insert(t)}),!1)))},Object.defineProperty(e.prototype,"divided",{get:function(){return this.children.length>0},enumerable:!0,configurable:!0}),e.prototype.subdivide=function(){var t=this.bound.center.x,n=this.bound.center.y,r=this.bound.width/2,i=this.bound.height/2;this.children.push(new e(new u.Rect(new o.Point(t+r/2,n+i/2),r,i))),this.children.push(new e(new u.Rect(new o.Point(t+r/2,n-i/2),r,i))),this.children.push(new e(new u.Rect(new o.Point(t-r/2,n-i/2),r,i))),this.children.push(new e(new u.Rect(new o.Point(t-r/2,n+i/2),r,i)))},e.prototype.query=function(e,t){return void 0===t&&(t=[]),this.bound.intersects(e)&&(t.push.apply(t,i(this.points.filter(u.Rect.contains(e)))),this.divided&&this.children.forEach((function(n){t.push.apply(t,i(n.query(e)))}))),t},e.capacity=4,e}();t.QuadTree=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){this.x=e,this.y=t};t.Point=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(t,n,r){this.center=t,this.width=n,this.height=r,this.contains=e.contains(this),this.intersects=e.intersects(this)}return e.contains=function(e){return function(t){return t.x>=e.center.x-e.width/2&&t.x<=e.center.x+e.width/2&&t.y>=e.center.y-e.height/2&&t.y<=e.center.y+e.height/2}},e.intersects=function(e){return function(t){return!(e.center.x-e.width/2>t.center.x+t.width/2||e.center.x+e.width/2<t.center.x-t.width/2||e.center.y-e.height/2>t.center.y+t.height/2||e.center.y+e.height/2<t.center.y-t.height/2)}},e}();t.Rect=r}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,