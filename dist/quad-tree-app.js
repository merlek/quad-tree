/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./example/quad-tree-app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../canvas-tools/dist/canvas-tools.js":
/*!********************************************!*\
  !*** ../canvas-tools/dist/canvas-tools.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():undefined}(window,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){var n=this;void 0===e&&(e=30),this.canvas=t,this.fps=e,this.update=function(t){return function(e){e-t>1e3/n.fps?(n.draw(),n.animationFrameId=window.requestAnimationFrame(n.update(e))):n.animationFrameId=window.requestAnimationFrame(n.update(t))}},this.ctx=t.getContext("2d"),setTimeout((function(){n.setup()}),0),window.requestAnimationFrame(this.update(0))}return t.prototype.clear=function(t){void 0===t&&(t=this.ctx),t.clearRect(0,0,this.canvas.width,this.canvas.height)},t.prototype.destroy=function(){this.animationFrameId&&window.cancelAnimationFrame(this.animationFrameId)},t}();e.CanvasAnimator=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.draw=function(t,e){var n=e.x,o=e.y,r=e.width,i=e.height,a=e.radius,u=e.fillStyle,s=e.strokeStyle;"number"==typeof a&&(a={tl:a,tr:a,br:a,bl:a}),t.save(),t.beginPath(),t.moveTo(n+a.tl,o),t.lineTo(n+r-a.tr,o),t.quadraticCurveTo(n+r,o,n+r,o+a.tr),t.lineTo(n+r,o+i-a.br),t.quadraticCurveTo(n+r,o+i,n+r-a.br,o+i),t.lineTo(n+a.bl,o+i),t.quadraticCurveTo(n,o+i,n,o+i-a.bl),t.lineTo(n,o+a.tl),t.quadraticCurveTo(n,o,n+a.tl,o),t.closePath(),u&&(t.fillStyle=u,t.fill()),s&&(t.strokeStyle=s,t.stroke()),t.restore()},t}();e.RoundedRect=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.FONT_FAMILY='Montserrat, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',t.draw=function(e,n){var o=n.text,r=n.x,i=n.y,a=n.maxWidth,u=n.font,s=n.fillStyle,c=n.textAlign,l=void 0===c?"center":c,f=n.textBaseline,d=void 0===f?"middle":f;e.save(),e.fillStyle=s,"number"==typeof u&&(u=t.getFont(u)),e.font=u,e.textAlign=l,e.textBaseline=d,e.fillText(o,r,i,a),e.restore()},t.getFont=function(e){return e+"px "+t.FONT_FAMILY},t}();e.Text=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.contains=function(t,e){return t.x>e.x&&t.x<e.x+e.width&&t.y<e.y+e.height&&t.y>e.y},t}();e.Rect=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(5);e.Animators=o;var r=n(8);e.ImageLoader=r.ImageLoader,function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(9))},function(t,e,n){"use strict";function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n(6)),o(n(0)),o(n(7)),e.createCanvasElement=function(t,e,n){var o,r;void 0===e&&(e=600),void 0===n&&(n=600);var i=document.createElement("canvas");i.width=e,i.height=n,i.style.cssText="width: 100%;";var a=document.getElementById(t);return(null===(o=a)||void 0===o?void 0:o.innerHTML)&&(a.innerHTML=""),null===(r=a)||void 0===r||r.append(i),i}},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,n){void 0===n&&(n="#232323");var o=t.call(this,e)||this;return o.fillStyle=n,o.draw=function(t,e){void 0===t&&(t=o.fillStyle),void 0===e&&(e=o.ctx),e.save(),e.fillStyle=t,e.fillRect(0,0,o.canvas.width,o.canvas.height),e.restore()},o.update=function(t){return function(t){o.draw()}},o}return r(e,t),e.prototype.setup=function(){},e}(n(0).CanvasAnimator);e.BackgroundAnimator=i},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,n){var o=t.call(this,e)||this;return o.canvas=e,o.grid=n,o}return r(e,t),e.prototype.x=function(t){return Math.round(t*this.canvas.width/this.grid.cols)},e.prototype.y=function(t){return Math.round(t*this.canvas.height/this.grid.rows)},e}(n(0).CanvasAnimator);e.CanvasGridAnimator=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){void 0===e&&(e=function(){}),this.loaded=0,this.images={};var n=0;for(var o in t)t.hasOwnProperty(o)&&n++;for(var o in this.total=n,t)t.hasOwnProperty(o)&&(this.images[o]=new Image,this.images[o].src=t[o]);this.onLoad(e)}return t.prototype.hasImage=function(t){return null!=this.images[t]},t.prototype.onLoad=function(t){var e=this;for(var n in this.images)this.images.hasOwnProperty(n)&&(this.loaded<this.total?this.images[n].addEventListener("load",(function(){++e.loaded>=e.total&&t(e.images)}),!1):t(this.images))},t}();e.ImageLoader=o},function(t,e,n){"use strict";function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n(10)),o(n(11)),o(n(12)),o(n(13)),o(n(14)),o(n(3)),o(n(1)),o(n(2))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(2),i=function(){function t(){}return t.draw=function(t,e){var n=e.x,i=e.y,a=e.width,u=e.height,s=e.radius,c=e.fillStyle,l=e.strokeStyle,f=void 0===l?"rgba(255,255,255,0)":l,d=e.borderWidth,v=void 0===d?Math.min(4,a/36*4):d,y=e.hoverStyle,h=e.text,p=e.font,m=e.textStyle,_=e.state;t.save(),"hover"===_&&y?c=y:c&&(c=c),t.lineWidth=v,"hover"===_&&y?f=y:f&&(f=f),o.RoundedRect.draw(t,{x:n,y:i,width:a,height:u,radius:s,fillStyle:c,strokeStyle:f}),r.Text.draw(t,{text:h,x:n+a/2,y:i+u/2,maxWidth:.9*a,font:p,fillStyle:"string"==typeof m?m:m()}),t.restore()},t}();e.Button=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.create=function(t,e,n){return{center:{x:t,y:e},radius:n}},t.draw=function(t,e){var n=e.center,o=e.radius,r=e.fillStyle,i=e.strokeStyle;t.save(),t.beginPath(),t.arc(n.x,n.y,o,0,2*Math.PI),t.closePath(),r&&(t.fillStyle=r,t.fill()),i&&(t.strokeStyle=i,t.stroke()),t.restore()},t}();e.Circle=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.draw=function(t,e){var n=e.start,o=e.end;t.beginPath(),t.moveTo(n.x,n.y),t.lineTo(o.x,o.y),t.stroke(),t.closePath()},t}();e.Line=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),r=function(){function t(){}return t.addClickEventListener=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=t.getMousePos(e),a=function(t){var e=i(t);n.forEach((function(n){n.enabled&&o.Rect.contains(e,n)&&n.onClick(t)}))};return e.addEventListener("click",a),{type:"click",function:a}},t.addHoverEventListener=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=t.getMousePos(e),a=function(t){var r=i(t),a=!1;n.forEach((function(e){e.enabled&&o.Rect.contains(r,e)?("hover"!==e.state&&(e.state="hover",e.onMouseEnter&&e.onMouseEnter(t)),a=!0):"hover"===e.state&&(e.state=void 0,e.onMouseLeave&&e.onMouseLeave(t))})),e.style.cursor=a?"pointer":"default"};return e.addEventListener("mousemove",a),{type:"mousemove",function:a}},t.getMousePos=function(t){return function(e){var n=t.getBoundingClientRect();return{x:(e.clientX-n.left)/(n.right-n.left)*t.width,y:(e.clientY-n.top)/(n.bottom-n.top)*t.height}}},t}();e.Mouse=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.create=function(t,e,n){return{x:t,y:e,z:n}},t.squaredDistance=function(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+(void 0!==t.z&&void 0!==e.z?Math.pow(e.z-t.z,2):0)},t.distance=function(t,e){return Math.sqrt(this.squaredDistance(t,e))},t.scale=function(t,e){return e.x*=t,e.y*=t,void 0!==e.z&&(e.z*=t),e},t.equals=function(t){return function(e){return null!=t&&null!=e&&t.x===e.x&&t.y===e.y&&t.z===e.z}},t}();e.Point=o}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./example/quad-tree-app.ts":
/*!**********************************!*\
  !*** ./example/quad-tree-app.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var canvas_tools_1 = __webpack_require__(/*! canvas-tools */ "../canvas-tools/dist/canvas-tools.js");
var utility_functions_1 = __webpack_require__(/*! utility-functions */ "./node_modules/utility-functions/dist/utility-functions.js");
var data_structures_1 = __webpack_require__(/*! ../src/data-structures */ "./src/data-structures.ts");
var quad_tree_1 = __webpack_require__(/*! ../src/quad-tree */ "./src/quad-tree.ts");
var width = 400;
var height = 400;
var querySize = 100;
var QuadTreeApp = /** @class */ (function (_super) {
    __extends(QuadTreeApp, _super);
    function QuadTreeApp(containerId) {
        var _this = _super.call(this, canvas_tools_1.Animators.createCanvasElement(containerId, width, height)) || this;
        _this.qtree = new quad_tree_1.QuadTree(new data_structures_1.Rect(new data_structures_1.Point(width / 2, height / 2), width, height));
        _this.queryRange = new data_structures_1.Rect(new data_structures_1.Point(width / 2, height / 2), querySize, querySize);
        return _this;
    }
    QuadTreeApp.prototype.setup = function () {
        var _this = this;
        console.log(this.qtree);
        for (var i = 0; i < 1000; i++) {
            this.qtree.insert(new data_structures_1.Point(utility_functions_1.randomInt(0)(width), utility_functions_1.randomInt(0)(height)));
        }
        var getMousePos = canvas_tools_1.Mouse.getMousePos(this.canvas);
        this.canvas.addEventListener('mousemove', function (e) {
            var pos = getMousePos(e);
            _this.queryRange = new data_structures_1.Rect(new data_structures_1.Point(pos.x, pos.y), querySize, querySize);
        });
        return this.qtree;
    };
    QuadTreeApp.prototype.draw = function (qt, ctx) {
        if (qt === void 0) { qt = this.qtree; }
        if (ctx === void 0) { ctx = this.ctx; }
        ctx.clearRect(0, 0, width, height);
        ctx.lineWidth = 1;
        ctx.strokeStyle = 'white';
        this.drawQuadTree(ctx, qt);
        ctx.strokeStyle = 'green';
        this.strokeRect(ctx, this.queryRange);
        this.qtree.query(this.queryRange).forEach(function (p) {
            return canvas_tools_1.Circle.draw(ctx, {
                center: p,
                radius: 2,
                fillStyle: 'rgb(100,255,100)'
            });
        });
    };
    QuadTreeApp.prototype.drawQuadTree = function (ctx, qt) {
        var _this = this;
        this.strokeRect(ctx, qt.bound);
        qt.points.forEach(function (p) {
            return canvas_tools_1.Circle.draw(ctx, {
                center: p,
                radius: 1,
                fillStyle: 'rgb(255,255,255)'
            });
        });
        if (qt.divided) {
            qt.children.forEach(function (child) { return _this.drawQuadTree(ctx, child); });
        }
    };
    QuadTreeApp.prototype.strokeRect = function (ctx, rect) {
        ctx.strokeRect(rect.center.x - rect.width / 2, rect.center.y - rect.height / 2, rect.width, rect.height);
    };
    return QuadTreeApp;
}(canvas_tools_1.Animators.CanvasAnimator));
exports.QuadTreeApp = QuadTreeApp;
window.QuadTreeApp = QuadTreeApp;


/***/ }),

/***/ "./node_modules/utility-functions/dist/utility-functions.js":
/*!******************************************************************!*\
  !*** ./node_modules/utility-functions/dist/utility-functions.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(n,r){ true?module.exports=r():undefined}(window,(function(){return function(n){var r={};function t(e){if(r[e])return r[e].exports;var u=r[e]={i:e,l:!1,exports:{}};return n[e].call(u.exports,u,u.exports,t),u.l=!0,u.exports}return t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,r){if(1&r&&(n=t(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var u in n)t.d(e,u,function(r){return n[r]}.bind(null,u));return e},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.p="",t(t.s=0)}([function(n,r,t){"use strict";var e=this&&this.__spreadArrays||function(){for(var n=0,r=0,t=arguments.length;r<t;r++)n+=arguments[r].length;var e=Array(n),u=0;for(r=0;r<t;r++)for(var o=arguments[r],i=0,f=o.length;i<f;i++,u++)e[u]=o[i];return e};function u(n){return function(r){return n}}function o(n){return function(r){return r.map(n)}}function i(n){return function(r){return r.map((function(r,t){return n(r)(t)}))}}function f(n){return function(r){var t;return(t={})[n]=r,t}}function c(n){return function(r){return Array.apply(null,Array(r-n)).map((function(r,t){return n+t}))}}function a(n){return function(r){return Math.floor(Math.random()*r)+n}}Object.defineProperty(r,"__esModule",{value:!0}),r.dropFirst=function(n){return n.slice(1)},r.dropLast=function(n){return n.slice(0,n.length-1)},r.id=function(n){return n},r.keep=u,r.map=o,r.mapi=i,r.adjust=function(n){return function(r){return function(t){return i((function(t){return function(e){return e===n?r(t):t}}))(t)}}},r.merge=function(n){var r=Array.isArray(n)?[]:{};return function(t){return Object.assign(r,n,t)}},r.mod=function(n){return function(r){return(r%n+n)%n}},r.objOf=f,r.pipe=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return function(r){return e(n).reduce((function(n,r){return r(n)}),r)}},r.prop=function(n){return function(r){return r[n]}},r.range=c,r.repeat=function(n){return function(r){return o(u(n))(c(0)(r))}},r.randomInt=a,r.random=function(n){if(Array.isArray(n))return n[a(0)(n.length)];if("number"==typeof n)return function(r){return Math.random()*r+n};throw Error("Incompatible parameter type: "+typeof n)},r.spec=function(n){return function(r){return Object.keys(n).map((function(t){return f(t)(n[t](r))})).reduce((function(n,r){return Object.assign(n,r)}))}},r.mapRange=function(n){return function(r,t){return function(e,u){return(n-r)*(u-e)/(t-r)+e}}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./src/data-structures.ts":
/*!********************************!*\
  !*** ./src/data-structures.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Point = /** @class */ (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    return Point;
}());
exports.Point = Point;
var Rect = /** @class */ (function () {
    function Rect(center, width, height) {
        var _this = this;
        this.center = center;
        this.width = width;
        this.height = height;
        this.contains = function (pos) {
            return pos.x >= _this.center.x - _this.width / 2 &&
                pos.x <= _this.center.x + _this.width / 2 &&
                pos.y >= _this.center.y - _this.height / 2 &&
                pos.y <= _this.center.y + _this.height / 2;
        };
        this.intersects = function (range) {
            return !(range.center.x - range.width / 2 > _this.center.x + _this.width / 2 ||
                range.center.x + range.width / 2 < _this.center.x - _this.width / 2 ||
                range.center.y - range.height / 2 > _this.center.y + _this.height / 2 ||
                range.center.y + range.height / 2 < _this.center.y - _this.height / 2);
        };
    }
    return Rect;
}());
exports.Rect = Rect;


/***/ }),

/***/ "./src/quad-tree.ts":
/*!**************************!*\
  !*** ./src/quad-tree.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_structures_1 = __webpack_require__(/*! ./data-structures */ "./src/data-structures.ts");
var QuadTree = /** @class */ (function () {
    function QuadTree(bound) {
        this.bound = bound;
        this.points = [];
        this.children = [];
    }
    QuadTree.prototype.insert = function (point) {
        if (!this.bound.contains(point)) {
            return false;
        }
        if (this.points.length < QuadTree.capacity) {
            this.points.push(point);
            return true;
        }
        else {
            if (!this.divided) {
                this.subdivide();
            }
            return this.children.reduce(function (inserted, child) { return inserted || child.insert(point); }, false);
        }
    };
    Object.defineProperty(QuadTree.prototype, "divided", {
        get: function () {
            return this.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    QuadTree.prototype.subdivide = function () {
        var x = this.bound.center.x;
        var y = this.bound.center.y;
        var w = this.bound.width / 2;
        var h = this.bound.height / 2;
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x + w / 2, y + h / 2), w, h)));
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x + w / 2, y - h / 2), w, h)));
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x - w / 2, y - h / 2), w, h)));
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x - w / 2, y + h / 2), w, h)));
    };
    QuadTree.prototype.query = function (range, found) {
        if (found === void 0) { found = []; }
        if (this.bound.intersects(range)) {
            found.push.apply(found, __spread(this.points.filter(range.contains)));
            if (this.divided) {
                this.children.forEach(function (child) {
                    found.push.apply(found, __spread(child.query(range)));
                });
            }
        }
        return found;
    };
    QuadTree.capacity = 4;
    return QuadTree;
}());
exports.QuadTree = QuadTree;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,