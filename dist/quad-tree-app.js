/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./example/quad-tree-app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../canvas-tools/dist/canvas-tools.js":
/*!********************************************!*\
  !*** ../canvas-tools/dist/canvas-tools.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():undefined}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.canvas=t,this.ctx=t.getContext("2d")}return t.prototype.clear=function(t){void 0===t&&(t=this.ctx),t.clearRect(0,0,this.canvas.width,this.canvas.height)},t}();e.CanvasAnimator=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.draw=function(t,e){var n=e.x,r=e.y,o=e.width,i=e.height,u=e.radius,a=e.fillStyle,s=e.strokeStyle;"number"==typeof u&&(u={tl:u,tr:u,br:u,bl:u}),t.save(),t.beginPath(),t.moveTo(n+u.tl,r),t.lineTo(n+o-u.tr,r),t.quadraticCurveTo(n+o,r,n+o,r+u.tr),t.lineTo(n+o,r+i-u.br),t.quadraticCurveTo(n+o,r+i,n+o-u.br,r+i),t.lineTo(n+u.bl,r+i),t.quadraticCurveTo(n,r+i,n,r+i-u.bl),t.lineTo(n,r+u.tl),t.quadraticCurveTo(n,r,n+u.tl,r),t.closePath(),a&&(t.fillStyle=a,t.fill()),s&&(t.strokeStyle=s,t.stroke()),t.restore()},t}();e.RoundedRect=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.FONT_FAMILY='Montserrat, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',t.draw=function(e,n){var r=n.text,o=n.x,i=n.y,u=n.maxWidth,a=n.font,s=n.fillStyle,c=n.textAlign,l=void 0===c?"center":c,f=n.textBaseline,d=void 0===f?"middle":f;e.save(),e.fillStyle=s,"number"==typeof a&&(a=t.getFont(a)),e.font=a,e.textAlign=l,e.textBaseline=d,e.fillText(r,o,i,u),e.restore()},t.getFont=function(e){return e+"px "+t.FONT_FAMILY},t}();e.Text=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.isIntersect=function(t,e){return t.x>e.x&&t.x<e.x+e.width&&t.y<e.y+e.height&&t.y>e.y},t}();e.Rect=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(5);e.Animators=r;var o=n(8);e.ImageLoader=o.ImageLoader,function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(9))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(6)),r(n(0)),r(n(7))},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,n){void 0===n&&(n="#232323");var r=t.call(this,e)||this;return r.fillStyle=n,r.draw=function(t,e){void 0===t&&(t=r.fillStyle),void 0===e&&(e=r.ctx),e.save(),e.fillStyle=t,e.fillRect(0,0,r.canvas.width,r.canvas.height),e.restore()},r}return o(e,t),e}(n(0).CanvasAnimator);e.BackgroundAnimator=i},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,n){var r=t.call(this,e)||this;return r.canvas=e,r.grid=n,r}return o(e,t),e.prototype.x=function(t){return Math.round(t*this.canvas.width/this.grid.cols)},e.prototype.y=function(t){return Math.round(t*this.canvas.height/this.grid.rows)},e}(n(0).CanvasAnimator);e.CanvasGridAnimator=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){void 0===e&&(e=function(){}),this.loaded=0,this.images={};var n=0;for(var r in t)t.hasOwnProperty(r)&&n++;for(var r in this.total=n,t)t.hasOwnProperty(r)&&(this.images[r]=new Image,this.images[r].src=t[r]);this.onLoad(e)}return t.prototype.hasImage=function(t){return null!=this.images[t]},t.prototype.onLoad=function(t){var e=this;for(var n in this.images)this.images.hasOwnProperty(n)&&(this.loaded<this.total?this.images[n].addEventListener("load",(function(){++e.loaded>=e.total&&t(e.images)}),!1):t(this.images))},t}();e.ImageLoader=r},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(10)),r(n(11)),r(n(12)),r(n(13)),r(n(14)),r(n(3)),r(n(1)),r(n(2))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),o=n(2),i=function(){function t(){}return t.draw=function(t,e){var n=e.x,i=e.y,u=e.width,a=e.height,s=e.radius,c=e.fillStyle,l=e.strokeStyle,f=void 0===l?"rgba(255,255,255,0)":l,d=e.borderWidth,v=void 0===d?Math.min(4,u/36*4):d,y=e.hoverStyle,h=e.text,p=e.font,_=e.textStyle,b=e.state;t.save(),"hover"===b&&y?c=y:c&&(c=c),t.lineWidth=v,"hover"===b&&y?f=y:f&&(f=f),r.RoundedRect.draw(t,{x:n,y:i,width:u,height:a,radius:s,fillStyle:c,strokeStyle:f}),o.Text.draw(t,{text:h,x:n+u/2,y:i+a/2,maxWidth:.9*u,font:p,fillStyle:"string"==typeof _?_:_()}),t.restore()},t}();e.Button=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.create=function(t,e,n){return{center:{x:t,y:e},radius:n}},t.draw=function(t,e){var n=e.center,r=e.radius,o=e.fillStyle,i=e.strokeStyle;t.save(),t.beginPath(),t.arc(n.x,n.y,r,0,2*Math.PI),t.closePath(),o&&(t.fillStyle=o,t.fill()),i&&(t.strokeStyle=i,t.stroke()),t.restore()},t}();e.Circle=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.draw=function(t,e){var n=e.start,r=e.end;t.beginPath(),t.moveTo(n.x,n.y),t.lineTo(r.x,r.y),t.stroke(),t.closePath()},t}();e.Line=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),o=function(){function t(){}return t.addClickEventListener=function(e){for(var n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var i=t.getMousePos(e),u=function(t){var e=i(t);n.forEach((function(n){n.enabled&&r.Rect.isIntersect(e,n)&&n.onClick(t)}))};return e.addEventListener("click",u),{type:"click",function:u}},t.addHoverEventListener=function(e){for(var n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var i=t.getMousePos(e),u=function(t){var o=i(t),u=!1;n.forEach((function(e){e.enabled&&r.Rect.isIntersect(o,e)?("hover"!==e.state&&(e.state="hover",e.onMouseEnter&&e.onMouseEnter(t)),u=!0):"hover"===e.state&&(e.state=void 0,e.onMouseLeave&&e.onMouseLeave(t))})),e.style.cursor=u?"pointer":"default"};return e.addEventListener("mousemove",u),{type:"mousemove",function:u}},t.getMousePos=function(t){return function(e){var n=t.getBoundingClientRect();return{x:(e.clientX-n.left)/(n.right-n.left)*t.width,y:(e.clientY-n.top)/(n.bottom-n.top)*t.height}}},t}();e.Mouse=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.create=function(t,e,n){return{x:t,y:e,z:n}},t.squaredDistance=function(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+(void 0!==t.z&&void 0!==e.z?Math.pow(e.z-t.z,2):0)},t.distance=function(t,e){return Math.sqrt(this.squaredDistance(t,e))},t.scale=function(t,e){return e.x*=t,e.y*=t,void 0!==e.z&&(e.z*=t),e},t.equals=function(t){return function(e){return null!=t&&null!=e&&t.x===e.x&&t.y===e.y&&t.z===e.z}},t}();e.Point=r}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./example/quad-tree-app.ts":
/*!**********************************!*\
  !*** ./example/quad-tree-app.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var canvas_tools_1 = __webpack_require__(/*! canvas-tools */ "../canvas-tools/dist/canvas-tools.js");
var utility_functions_1 = __webpack_require__(/*! utility-functions */ "./node_modules/utility-functions/dist/utility-functions.js");
var data_structures_1 = __webpack_require__(/*! ../src/data-structures */ "./src/data-structures.ts");
var quad_tree_1 = __webpack_require__(/*! ../src/quad-tree */ "./src/quad-tree.ts");
exports.width = 400;
exports.height = 400;
var QuadTreeApp = /** @class */ (function () {
    function QuadTreeApp(containerId, canvas) {
        var _this = this;
        var _a, _b;
        this.canvas = canvas;
        this.update = function (t1) { return function (t2) {
            if (t2 - t1 > 1000 / 30) {
                _this.draw();
                _this.animationFrameId = window.requestAnimationFrame(_this.update(t2));
            }
            else {
                _this.animationFrameId = window.requestAnimationFrame(_this.update(t1));
            }
        }; };
        this.draw = function (ctx, qt) {
            if (ctx === void 0) { ctx = _this.ctx; }
            if (qt === void 0) { qt = _this.qtree; }
            ctx.clearRect(0, 0, exports.width, exports.height);
            ctx.lineWidth = 1;
            ctx.strokeStyle = 'white';
            _this.drawQuadTree(ctx, qt);
        };
        if (!this.canvas) {
            this.canvas = document.createElement('canvas');
            this.canvas.width = exports.width;
            this.canvas.height = exports.height;
            this.canvas.style.cssText = 'width: 100%;';
            var container = document.getElementById(containerId);
            if ((_a = container) === null || _a === void 0 ? void 0 : _a.innerHTML) {
                container.innerHTML = '';
            }
            (_b = container) === null || _b === void 0 ? void 0 : _b.append(this.canvas);
        }
        this.ctx = this.canvas.getContext('2d');
        this.qtree = this.setupQuadTree();
        this.draw();
        window.requestAnimationFrame(this.update(0));
    }
    QuadTreeApp.prototype.setupQuadTree = function () {
        var qtree = new quad_tree_1.QuadTree(new data_structures_1.Rect(new data_structures_1.Point(200, 200), 400, 400));
        console.log(qtree);
        for (var i = 0; i < 100; i++) {
            qtree.insert(new data_structures_1.Point(utility_functions_1.randomInt(0)(exports.width), utility_functions_1.randomInt(0)(exports.height)));
        }
        return qtree;
    };
    QuadTreeApp.prototype.drawQuadTree = function (ctx, qt) {
        var _this = this;
        ctx.strokeRect(qt.bound.center.x - qt.bound.width / 2, qt.bound.center.y - qt.bound.height / 2, qt.bound.width, qt.bound.height);
        qt.points.forEach(function (p) {
            return canvas_tools_1.Circle.draw(ctx, {
                center: p,
                radius: 2,
                fillStyle: 'rgb(255,100,100)'
            });
        });
        if (qt.divided) {
            qt.children.forEach(function (child) { return _this.drawQuadTree(ctx, child); });
        }
    };
    QuadTreeApp.prototype.destroy = function () {
        if (this.animationFrameId) {
            window.cancelAnimationFrame(this.animationFrameId);
        }
    };
    return QuadTreeApp;
}());
exports.QuadTreeApp = QuadTreeApp;
window.QuadTreeApp = QuadTreeApp;


/***/ }),

/***/ "./node_modules/utility-functions/dist/utility-functions.js":
/*!******************************************************************!*\
  !*** ./node_modules/utility-functions/dist/utility-functions.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(n,r){ true?module.exports=r():undefined}(window,(function(){return function(n){var r={};function t(e){if(r[e])return r[e].exports;var u=r[e]={i:e,l:!1,exports:{}};return n[e].call(u.exports,u,u.exports,t),u.l=!0,u.exports}return t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,r){if(1&r&&(n=t(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var u in n)t.d(e,u,function(r){return n[r]}.bind(null,u));return e},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.p="",t(t.s=0)}([function(n,r,t){"use strict";var e=this&&this.__spreadArrays||function(){for(var n=0,r=0,t=arguments.length;r<t;r++)n+=arguments[r].length;var e=Array(n),u=0;for(r=0;r<t;r++)for(var o=arguments[r],i=0,f=o.length;i<f;i++,u++)e[u]=o[i];return e};function u(n){return function(r){return n}}function o(n){return function(r){return r.map(n)}}function i(n){return function(r){return r.map((function(r,t){return n(r)(t)}))}}function f(n){return function(r){var t;return(t={})[n]=r,t}}function c(n){return function(r){return Array.apply(null,Array(r-n)).map((function(r,t){return n+t}))}}function a(n){return function(r){return Math.floor(Math.random()*r)+n}}Object.defineProperty(r,"__esModule",{value:!0}),r.dropFirst=function(n){return n.slice(1)},r.dropLast=function(n){return n.slice(0,n.length-1)},r.id=function(n){return n},r.keep=u,r.map=o,r.mapi=i,r.adjust=function(n){return function(r){return function(t){return i((function(t){return function(e){return e===n?r(t):t}}))(t)}}},r.merge=function(n){var r=Array.isArray(n)?[]:{};return function(t){return Object.assign(r,n,t)}},r.mod=function(n){return function(r){return(r%n+n)%n}},r.objOf=f,r.pipe=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return function(r){return e(n).reduce((function(n,r){return r(n)}),r)}},r.prop=function(n){return function(r){return r[n]}},r.range=c,r.repeat=function(n){return function(r){return o(u(n))(c(0)(r))}},r.randomInt=a,r.random=function(n){if(Array.isArray(n))return n[a(0)(n.length)];if("number"==typeof n)return function(r){return Math.random()*r+n};throw Error("Incompatible parameter type: "+typeof n)},r.spec=function(n){return function(r){return Object.keys(n).map((function(t){return f(t)(n[t](r))})).reduce((function(n,r){return Object.assign(n,r)}))}},r.mapRange=function(n){return function(r,t){return function(e,u){return(n-r)*(u-e)/(t-r)+e}}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./src/data-structures.ts":
/*!********************************!*\
  !*** ./src/data-structures.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Point = /** @class */ (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    return Point;
}());
exports.Point = Point;
var Rect = /** @class */ (function () {
    function Rect(center, width, height) {
        var _this = this;
        this.center = center;
        this.width = width;
        this.height = height;
        this.contains = function (pos) {
            return pos.x >= _this.center.x - _this.width / 2 &&
                pos.x <= _this.center.x + _this.width / 2 &&
                pos.y >= _this.center.y - _this.height / 2 &&
                pos.y <= _this.center.y + _this.height / 2;
        };
    }
    return Rect;
}());
exports.Rect = Rect;


/***/ }),

/***/ "./src/quad-tree.ts":
/*!**************************!*\
  !*** ./src/quad-tree.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_structures_1 = __webpack_require__(/*! ./data-structures */ "./src/data-structures.ts");
var QuadTree = /** @class */ (function () {
    function QuadTree(bound) {
        this.bound = bound;
        this.points = [];
        this.children = [];
    }
    QuadTree.prototype.insert = function (point) {
        if (!this.bound.contains(point)) {
            return false;
        }
        if (this.points.length < QuadTree.capacity) {
            this.points.push(point);
            return true;
        }
        else {
            if (!this.divided) {
                this.subdivide();
            }
            return this.children.reduce(function (inserted, child) { return inserted || child.insert(point); }, false);
        }
    };
    Object.defineProperty(QuadTree.prototype, "divided", {
        get: function () {
            return this.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    QuadTree.prototype.subdivide = function () {
        var x = this.bound.center.x;
        var y = this.bound.center.y;
        var w = this.bound.width / 2;
        var h = this.bound.height / 2;
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x + w / 2, y + h / 2), w, h)));
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x + w / 2, y - h / 2), w, h)));
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x - w / 2, y - h / 2), w, h)));
        this.children.push(new QuadTree(new data_structures_1.Rect(new data_structures_1.Point(x - w / 2, y + h / 2), w, h)));
    };
    QuadTree.capacity = 4;
    return QuadTree;
}());
exports.QuadTree = QuadTree;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,